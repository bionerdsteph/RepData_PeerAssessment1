attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix<-matrix(1:20,4,5)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bil","Gina","Kelly","Sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
main()
55/45
45/55
50/55
library(swirl)
rm(list=ls())
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
(6<7)==TRUE
6<7
10<=10
5!=7
5!=7
5!==7
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>5)
which(ints>7)
any(ints<0)
all(ints>0)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100,replacement=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
rbinom(100,size=1,prob=0.7)
rbinom(n=100,size=1,prob=0.7)
flips2<-rbinom(n=100,size=1,prob=0.7)
fips2
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,mean=10)
rpois(5,lambda=10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colmeans(my_pois)
cm<-colMeans(my_pois)
cm
hist(cm)
?read.xlsx
library(swirl)
ls()
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US"|country=="IN")
filter(cran, size>"100500")
filter(cran, size>"100500", r_os=="linux-gnu")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_gb=size_mb/2^10)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(cran, count>679)
top_counts<-filter(cran, count > 679)
skip()
top_counts
head(top_counts, 20)
arrange(top_counts, count)
arrange(top_counts, desc(count)
)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum, unique > 465)
top_unique
attange(top_unique, desc(unique))
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
URL<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(URL,"getdata-data-ss06hid.csv")
ACS<-read.csv("getdata-data-ss06hid.csv")
?strsplit
strsplit(ACS,string="wgtp")
strsplit(ACS,split = "wgtp")
head(ACS)
strsplit(ACS$WGTP)
strsplit(ACS$WGTP,split="wgtp")
names(ACS)
URL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(URL,"getdata-data-FGDP.csv")
FGDP<-read.csv("getdata-data-FGDP.csv")
head(FGDP)
FGDP<-read.csv("getdata-data-FGDP.csv",skip=4)
head(FGDP)
read.csv("getdata-data-FGDP.csv",stringsAsFactors = FALSE,skip=4)->FGDP
FGDP<-FGDP[,-3]
colnames(FGDP)[2:4]<-c("rank","Economy","GDP")
GDP<-FGDP$GDP
GDP2<-gsub(",","",GDP)
mean(GDP2)
mean(as.numeric(GDP2))
class(GDP2)
head(GDP2)
GDP3<-as.numeric(GDP2)
mean(GDP3)
read.csv("getdata-data-FGDP.csv",skip=4)->FGDP
FGDP<-FGDP[,-3]
FGDP<-FGDP[,1:4]
colnames(FGDP)[1]<-"CountryCode"
colnames(FGDP)[2:4]<-c("rank","Economy","GDP")
GDP<-FGDP$GDP
GDP2<-gsub(",","",GDP)
head(GDP2)
class(GDP2)
GDP3<-as.numeric(GDP2)
source('~/data/GCD Quiz3.R')
mean(GDP2)
head(GDP2)
class(GDP2)
as.numeric(GDP2)->GDP3
as.character(GDP2)->GDP2
as.numeric(GDP2)->GDP3
GDP2
GDP2<-sort(GDP2)
GDP2
GDP2[[-1:99]]->GDP3
GDP2[[-(1:99)]]->GDP3
GDP2[[C(100:289, 313:326)]]->GDP3
GDP2[100:289, 313:326]->GDP3
GDP2[100:289&313:326]->GDP3
GDP2[100:289]->GDP3
GDP2[313:326]->GDP4
GDP3
GDP
GDP4
merge(GDP3,GDP4)->GDP5
mean(as.numeric(GDP3))
read.csv("getdata-data-FGDP.csv",stringsAsFactors = FALSE,skip=4)->FGDP
grep("*United",countryNames),5
grep("^United",countryNames),3
grep("*United",countryNames)
grep("*United",countryNames),2
United<-grep("*United",countryNames)
United<-grep("*United",ACS$countryNames)
United
ACS$coutryNames
Names<-ACS$countryNames
Names
head(FGDP)
FGDP<-FGDP[,3]<-"countryNames"
United<-grep("*United",ACS$countryNames)
United
Names<-ACS$countryNames
Names
United<-grep("*United",FGDP$countryNames)
head(FGDP)
read.csv("getdata-data-FGDP.csv",stringsAsFactors = FALSE,skip=4)->FGDP
colnames(FGDP)[3]<-"countryNames"
United<-grep("*United",FGDP$countryNames)
United
United<-grep("^United",FGDP$countryNames)
United
United<-grep("United$",FGDP$countryNames)
United
?grep
Names<-FGDP$countryNames
Names
FGDP
head((FGDP))
read.csv("getdata-data-FGDP.csv",stringsAsFactors = FALSE,skip=4)->FGDP
colnames(FGDP)[4]<-"countryNames"
United<-grep("*United",FGDP$countryNames)
United
head(United)
Names<-FGDP$countryNames
head(Names)
UN<-grep("*United",Names)
UN
UN<-grep("^United",Names)
UN
UN<-grep("United$",Names)
UN
UN<-Names[grep("^United",Names)]
UN
UN<-Names[grep("*United",Names)]
UN
UN<-Names[grep("United$",Names)]
UN
source('~/data/GCD Quiz3.R')
source('~/data/GCD Quiz3.R')
source('~/data/GCD Quiz3.R')
read.csv("getdata-data-FGDP.csv",stringsAsFactors = FALSE,skip=4)->FGDP
FGDP<-FGDP[1:190]
source('~/data/GCD Quiz3.R')
?mutate
??mutate
library(dplyr)
FGDP2<-mutate(FGDP,GDP=GDP3)
URL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
FEDSTATS<-download.file(URL,"getdata-data-FEDSTATS_Country.csv")
head
head(FEDSTATS)
download.file(URL,"getdata-data-FEDSTATS_Country.csv")
FEDSTATS<-read.csv("getdata-data-FEDSTATS_Country.csv")
head(FEDSTATS)
?merge
GDPMerge<-merge(FGDP2,FEDSTATS,by=CountryCode)
colnames(FGDP)[1]<-"CountryCode"
colnames(FGDP)[2:4]<-c("rank","Economy","GDP")
GDP<-FGDP$GDP
GDP2<-gsub(",","",GDP)
GDP3<-as.numeric(GDP2)
FGDP2<-mutate(FGDP,GDP=GDP3)
GDPMerge<-merge(FGDP2,FEDSTATS,by="CountryCode")
head(GDPMerge)
names(GDPMerge)
FiscYear<-GDPMerge$Special.Notes
head(FiscYear)
June<-FiscYear[grep("^June",FiscYear)]
June
June<-FiscYear[grep("June",FiscYear)]
June
length(FiscYear)
FiscYear
length(June)
source('~/.active-rstudio-document')
head(sampleTimes)
2012<-sampleTimes[grep("2012",sampleTimes)]
sampleTimes[grep("2012",sampleTimes)]->first
length(first)
URL<-"https://s3.amazonaws.com/coursera-uploads/user-9e35ea46d15c561cb38311af/975115/asst-3/c267bfb0496211e588022d9559ff67b3.txt"
download.file(URL,"tidy_data.txt")
read.table("tidy_data.txt")
TD<-read.table("tidy_data.txt")
head(TD)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
TD<-read.table("assignment1.txt")
head(TD)
dim(TD)
source('~/.active-rstudio-document')
download.file(URL,"SummarizedDataApproach1.txt")
TD<-read.table("SummarizedDataApproach1.txt")
TD<-read.table("SummarizedDataApproach1.txt",skip=2)
TD<-read.txt("SummarizedDataApproach1.txt")
??read.txt
dim(TD)
source('~/.active-rstudio-document')
download.file(URL,"tidydata.txt")
TD<-read.table("tidydata.txt")
head(TD)
dim(TD)
library(dplyr)
library(ggplot2)
file<-read.csv("activity.csv",header = TRUE, stringsAsFactors = FALSE)
setwd("~/GitHub/RepData_PeerAssessment1/activity")
file<-read.csv("activity.csv",header = TRUE, stringsAsFactors = FALSE)
file2<-mutate(file, date=as.POSIXct(file$date, format="%Y-%m-%d"))
StepsPerDay<-aggregate(steps~date,file2,sum)
ggplot(data=StepsPerDay)+geom_histogram(aes(x=steps))
mean(StepsPerDay$steps)
median(StepsPerDay$steps)
StepsPerInterval<-aggregate(steps~interval,file2,mean)
plot<-ggplot(StepsPerInterval, aes(x=interval, y=steps))
plot
plot+geom_line(linetype=1)
StepsPerInterval
max(StepsPerInterval$steps)
StepsPerInterval[,max(StepsPerInterval$steps)]
StepsPerInterval[1,max(StepsPerInterval$steps)]
StepsPerInterval[2=206.1698,]
StepsPerInterval[2==206.1698,]
StepsPerInterval[StepsPerInterval$steps==max(StepsPerInterval$steps),]
sum(is.na(file2$steps))
head
head(file2)
StepsPerDay
?match
?sapply
?merge
file3<-function(file2,StepsPerDay,mergeCols,fillCols){
fillB<-do.call(paste,c(file2[,mergeCols,drop=FALSE],sep="/r"))
NaB<-do.call(paste, c(StepsPerDay[,mergeCols,drop=FALSE],sep="/r"))
m<-match(NaB,fillB)
for(col in fillCols){
fix<-which(is.na(file2[,col]))
file2[fix,col]<-StepsPerDay[m[fix],col]
}
}
head(file3)
file3<-function(file2,StepsPerDay,mergeCols,fillCols){
fillB<-do.call(paste,c(file2[,mergeCols,drop=FALSE],sep="/r"))
NaB<-do.call(paste, c(StepsPerDay[,mergeCols,drop=FALSE],sep="/r"))
m<-match(NaB,fillB)
for(col in fillCols){
fix<-which(is.na(file2[,col]))
file2[fix,col]<-StepsPerDay[m[fix],col]
}
file2
}
head(file3)
fun1<-function(file2,StepsPerDay,mergeCols,fillCols){
fillB<-do.call(paste,c(file2[,mergeCols,drop=FALSE],sep="/r"))
NaB<-do.call(paste, c(StepsPerDay[,mergeCols,drop=FALSE],sep="/r"))
m<-match(NaB,fillB)
for(col in fillCols){
fix<-which(is.na(file2[,col]))
file2[fix,col]<-StepsPerDay[m[fix],col]
}
file2
}
?sapply
file3<-sapply(file2, fun1)
fun1<-function(file2,StepsPerDay,mergeCols,fillCols){
fillB<-do.call(paste,c(file2[,mergeCols],drop=FALSE,sep="/r"))
NaB<-do.call(paste, c(StepsPerDay[,mergeCols],drop=FALSE,sep="/r"))
m<-match(NaB,fillB)
for(col in fillCols){
fix<-which(is.na(file2[,col]))
file2[fix,col]<-StepsPerDay[m[fix],col]
}
file2
}
file3<-sapply(file2, fun1)
?merge.data.frame
?na.locf
```
StepsPerDay$date[match(file2$date, StepsPerDay$date)],file2$steps)
StepsPerDay[match(file2$date, StepsPerDay$date)],file2$steps)
StepsPerDay[match(file2$date, StepsPerDay$date),file2$steps])
?match
StepsPerDay[match(file2$date, StepsPerDay$date),])
StepsPerDay[match(file2$date, StepsPerDay$date),StepsPerDay$steps])
file2steps<- merge.data.frame(file2, StepsPerDay, by=date, na.rm=TRUE)
file2steps<- merge.data.frame(file2, StepsPerDay, by=date)
class(file2)
class(StepsPerDay)
file2steps<- merge.data.frame(file2, StepsPerDay, by=date)
file2steps<- merge.data.frame(file2, StepsPerInterval, by=interval)
head(file2)
file2steps<- merge.data.frame(file2, StepsPerDay, by="date",na.rm=TRUE)
head(file2steps)
file2steps<- merge.data.frame(file2, StepsPerDay, by="date")
head(file2steps)
tail(file2steps)
file3<-file2[complete.cases(file2),]
head(file3)
?plot
StepsPerDay2<-aggregate(steps~date,file3,sum)
head(StepsPerDay2)
plot(StepsPerDay2$date,StepsPerDay2$steps,type="h")
plot(StepsPerDay2$date,StepsPerDay2$steps,type="h",xlab="date",ylab="steps")
(StepsPerDay2$steps)
mean(StepsPerDay2$steps)
Median=10765
?weekdays
Days<-mutate(file3,Day=weekdays(file3$date))
head(Days)
Days2<-gsub(C("Monday","Tuesday","Wednesday","Thursday","Friday"),"Weekday",Days)
Days2<-gsub("Monday""Tuesday""Wednesday""Thursday""Friday","Weekday",Days)
Days2<-gsub("Monday","Weekday",Days)
Days2<-gsub("Monday","Weekday",Days)
Days2<-gsub("Tuesday","Weekday",Days)
Days2<-gsub("Wednesday","Weekday",Days)
Days2<-gsub("Thursday","Weekday",Days)
Days2<-gsub("Friday","Weekday",Days)
Days2<-gsub("Saturday","Weekend",Days)
Days2<-gsub("Sunday","Weekend",Days)
head(Days2)
Days<-mutate(file3,Day=weekdays(file3$date))
Days2<-gsub("Monday","Weekday",Days)
Days2<-gsub("Tuesday","Weekday",Days2)
Days2<-gsub("Wednesday","Weekday",Days2)
Days2<-gsub("Thursday","Weekday",Days22)
Days2<-gsub("Friday","Weekday",Days2)
Days2<-gsub("Saturday","Weekend",Days2)
Days2<-gsub("Sunday","Weekend",Days2)
Days2<-gsub("Thursday","Weekday",Days2)
head(Days2)
head(Days)
gsub("Monday","Weekday",Days)
?gsub
Days<-mutate(file3,Day=weekdays(file3$date))
Days<-gsub("Monday","Weekday",Days)
head
head(Days)
Days<-mutate(file3,Day=weekdays(file3$date))
Days<-grep("Monday","Weekday",Days)
head(Days)
head
Days<-mutate(file3,Day=weekdays(file3$date))
head(Days)
Days$Day[Days$Day == "Monday"] <- "weekday"
head(Days)
Days$Day[Days$Day == c("Monday","Tuesday")] <- "weekday"
head(Days)
Days$Day[Days$Day == "Monday"] <- "weekday"
Days$Day[Days$Day == "Monday"] <- "weekday"
Days$Day[Days$Day == "Tuesday"] <- "weekday"
Days$Day[Days$Day == "Wednesday"] <- "weekday"
Days$Day[Days$Day == "Thursday"] <- "weekday"
Days$Day[Days$Day == "Friday"] <- "weekday"
Days$Day[Days$Day == "Saturday"] <- "weekend"
Days$Day[Days$Day == "Sunday"] <- "weekend"
head(Days)
DaysSteps<-aggregate(steps~Day+interval,Days,mean)
head(DaysSteps)
p<-ggplot(DaysSteps,aes(x=interval, y=steps))
p+geom_bar()+facet_wrap(~Days)
p+facet_wrap(~Days)
ggplot(DaysSteps,aes(x=interval, y=steps))+geom_bar()+facet_wrap(~Day)
?geom_bar
ggplot(DaysSteps,aes(x=interval, y=steps))+geom_line()+facet_wrap(~Day)
